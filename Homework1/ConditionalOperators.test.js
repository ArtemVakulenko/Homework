var {sumOrMultiply} = require ('./ConditionalOperators')
var {getQuarterByCoordinates}  = require ('./ConditionalOperators')
var {getSumOfPositiveNumbers}  = require ('./ConditionalOperators')
var {sumOrMultiplyPlus3}  = require ('./ConditionalOperators')
var {getGradeByRating}  = require ('./ConditionalOperators')

describe('sumOrMultiply', function(){
    it('should be defined', function(){
        expect(sumOrMultiply).toBeDefined()
    })
    it('should be function', function(){
        expect(typeof sumOrMultiply).toBe('function')
    })
    it('should work with first odd argument', function(){
        expect(sumOrMultiply(2, 4)).toBe(8)
    })
    it('should work with first odd argument', function(){
        expect(sumOrMultiply(2, 4)).not.toBe(6)
    })
    it('should work with first even argument', function(){
        expect(sumOrMultiply(3, 4)).toBe(7)
    })
    it('should work with first even argument', function(){
        expect(sumOrMultiply(3, 4)).not.toBe(12)
    })
})

describe('getQuarterByCoordinates', function(){
    it('should be defined', function(){
        expect(getQuarterByCoordinates).toBeDefined()
    })
    it('should be function', function(){
        expect(typeof getQuarterByCoordinates).toBe('function')
    })
    it('should work with strings', function(){
        expect(getQuarterByCoordinates("1", "2")).toBe('точка лежит в первой четверти')
    })
    it('should work with 1 quarter correctly', function(){
        expect(getQuarterByCoordinates(1, 2)).toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(1, 2)).not.toBe('неправильно введены данные')
    })
    it('should work with 2 quarter correctly', function(){
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(-1, 2)).toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(-1, 2)).not.toBe('неправильно введены данные')
    })
    it('should work with 3 quarter correctly', function(){
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(-1, -2)).toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(-1, -2)).not.toBe('неправильно введены данные')
    })
    it('should work with 4 quarter correctly', function(){
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(1, -2)).toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(1, -2)).not.toBe('неправильно введены данные')
    })
    it('should work with x=0, y > 0 case correctly', function(){
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(0, 2)).toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(0, 2)).not.toBe('неправильно введены данные')
    })
    it('should work with x=0, y < 0 case correctly', function(){
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(0, -2)).toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(0, -2)).not.toBe('неправильно введены данные')
    })
    it('should work with x > 0, y = 0 case correctly', function(){
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(2, 0)).toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(2, 0)).not.toBe('неправильно введены данные')
    })
    it('should work with x < 0, y = 0 case correctly', function(){
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(-2, 0)).toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(-2, 0)).not.toBe('неправильно введены данные')
    })
    it('should work with center coordinats correctly', function(){
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежит в первой четверти')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежит во второй четверти')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежит в третьей четверти')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежит в четвертой четверти')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежит на оси Y между первой и второй четвертями')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежита оси Y между третьей и четвертой четвертями')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежит на оси X между первой и четвертой четвертями')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('точка лежит на оси X между третьей и второй четвертями')
        expect(getQuarterByCoordinates(0, 0)).toBe('точка лежит в начале координат')
        expect(getQuarterByCoordinates(0, 0)).not.toBe('неправильно введены данные')
    })
})
describe('getSumOfPositiveNumbers', function(){
    it('should be defined', function(){
        expect(getSumOfPositiveNumbers).toBeDefined()
    })
    it('should be function', function(){
        expect(typeof getSumOfPositiveNumbers).toBe('function')
    })
    it('should work with 3 positive numbers', function(){
        expect(getSumOfPositiveNumbers(1, 2, 3)).toBe(6)
    })
    it('should work with 2 out of 3 positive numbers', function(){
        expect(getSumOfPositiveNumbers(0, 2, 3)).toBe(5)
        expect(getSumOfPositiveNumbers(1, 0, 3)).toBe(4)
        expect(getSumOfPositiveNumbers(1, 2, 0)).toBe(3)
        expect(getSumOfPositiveNumbers(-1, 2, 3)).toBe(5)
        expect(getSumOfPositiveNumbers(1, -1, 3)).toBe(4)
        expect(getSumOfPositiveNumbers(1, 2, -1)).toBe(3)
    })
    it('should work 3 negative numbers', function(){
        expect(getSumOfPositiveNumbers(-1, -2, -3)).toBe('введены только отрицательные числа')
    })
    it('should not work with 1 out of 3 positive numbers', function(){
        expect(getSumOfPositiveNumbers(1, -2, -3)).toBe("неверно введены данные")
    })
})
describe('sumOrMultiplyPlus3', function(){
    it('should be defined', function(){
        expect(sumOrMultiplyPlus3).toBeDefined()
    })
    it('should be function', function(){
        expect(typeof sumOrMultiplyPlus3).toBe('function')
    })
    it('should work', function(){
        expect(sumOrMultiplyPlus3(1, 1, 1)).toBe(6)
        expect(sumOrMultiplyPlus3(2, 3, 4)).toBe(27)
    })
})
describe('getGradeByRating', function(){
    it('should be defined', function(){
        expect(getGradeByRating).toBeDefined()
    })
    it('should be function', function(){
        expect(typeof getGradeByRating).toBe('function')
    })
    it('should not work witth rating > 100', function(){
        expect(getGradeByRating(101)).toBe('рейтинг введен некорректно')
        expect(getGradeByRating(101)).not.toBe('A')
        expect(getGradeByRating(101)).not.toBe('B')
        expect(getGradeByRating(101)).not.toBe('C')
        expect(getGradeByRating(101)).not.toBe('D')
        expect(getGradeByRating(101)).not.toBe('E')
        expect(getGradeByRating(101)).not.toBe('F')
    })
    it('should work with A correctly;', function(){
        expect(getGradeByRating(95)).not.toBe('рейтинг введен некорректно')
        expect(getGradeByRating(95)).toBe('A')
        expect(getGradeByRating(95)).not.toBe('B')
        expect(getGradeByRating(95)).not.toBe('C')
        expect(getGradeByRating(95)).not.toBe('D')
        expect(getGradeByRating(95)).not.toBe('E')
        expect(getGradeByRating(95)).not.toBe('F')
    })
    it('should work with B correctly;', function(){
        expect(getGradeByRating(79)).not.toBe('рейтинг введен некорректно')
        expect(getGradeByRating(79)).not.toBe('A')
        expect(getGradeByRating(79)).toBe('B')
        expect(getGradeByRating(79)).not.toBe('C')
        expect(getGradeByRating(79)).not.toBe('D')
        expect(getGradeByRating(79)).not.toBe('E')
        expect(getGradeByRating(79)).not.toBe('F')
    })
    it('should work with C correctly;', function(){
        expect(getGradeByRating(65)).not.toBe('рейтинг введен некорректно')
        expect(getGradeByRating(65)).not.toBe('A')
        expect(getGradeByRating(65)).not.toBe('B')
        expect(getGradeByRating(65)).toBe('C')
        expect(getGradeByRating(65)).not.toBe('D')
        expect(getGradeByRating(65)).not.toBe('E')
        expect(getGradeByRating(65)).not.toBe('F')
    })
    it('should work with D correctly;', function(){
        expect(getGradeByRating(45)).not.toBe('рейтинг введен некорректно')
        expect(getGradeByRating(45)).not.toBe('A')
        expect(getGradeByRating(45)).not.toBe('B')
        expect(getGradeByRating(45)).not.toBe('C')
        expect(getGradeByRating(45)).toBe('D')
        expect(getGradeByRating(45)).not.toBe('E')
        expect(getGradeByRating(45)).not.toBe('F')
    })
    it('should work with E correctly;', function(){
        expect(getGradeByRating(25)).not.toBe('рейтинг введен некорректно')
        expect(getGradeByRating(25)).not.toBe('A')
        expect(getGradeByRating(25)).not.toBe('B')
        expect(getGradeByRating(25)).not.toBe('C')
        expect(getGradeByRating(25)).not.toBe('D')
        expect(getGradeByRating(25)).toBe('E')
        expect(getGradeByRating(25)).not.toBe('F')
    })
    it('should work with F correctly;', function(){
        expect(getGradeByRating(10)).not.toBe('рейтинг введен некорректно')
        expect(getGradeByRating(10)).not.toBe('A')
        expect(getGradeByRating(10)).not.toBe('B')
        expect(getGradeByRating(10)).not.toBe('C')
        expect(getGradeByRating(10)).not.toBe('D')
        expect(getGradeByRating(10)).not.toBe('E')
        expect(getGradeByRating(10)).toBe('F')
    })
})